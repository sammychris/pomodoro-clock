{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TimeController","props","react_default","a","createElement","id","className","onClick","incrementBreak","break","decrementBreak","incrementSession","session","decrementSession","PlayPauseReset","default","sessionOperation","breakOperation","start","reset","DisplayComponent","text","display","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","sessionStart","breakStart","sessionTimer","breakTimer","warning","bind","assertThisInitialized","alarm","minuteSeconds","audioBeep","play","sec","minutes","Math","floor","seconds","concat","setState","pause","currentTime","_this2","time","setInterval","clearInterval","_this3","_this4","App_TimeController","App_DisplayComponent","App_PlayPauseReset","preload","src","ref","audio","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dd5407c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst TimeController = (props) => {\n  return (\n    <div>\n      <div id=\"main-title\">Pomodoro Clock</div>\n      <div id=\"buttons\">\n        <div id='break'>\n          <p>Break Length</p>\n          <div id=\"break-label\">\n            <div className='container-buttons' onClick={props.incrementBreak}>\n              <i id=\"break-increment\" className='fa fa-arrow-up fa-2x'></i>\n            </div>\n            <div id=\"break-length\">{props.break}</div>\n            <div className='container-buttons' onClick={props.decrementBreak}>\n              <i id=\"break-decrement\" className=\"fa fa-arrow-down fa-2x\"></i>\n            </div>\n          </div>\n        </div>\n        <div id=\"session\">\n          <p>Session Length</p>\n          <div id=\"session-label\">\n            <div className='container-buttons' onClick={props.incrementSession}>\n              <i id=\"session-increment\" className='fa fa-arrow-up fa-2x'></i>\n            </div>\n            <div id=\"session-length\">{props.session}</div>\n            <div className='container-buttons' onClick={props.decrementSession}>\n              <i id=\"session-decrement\" className=\"fa fa-arrow-down fa-2x\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nconst PlayPauseReset = (props) => {\n  return (\n        <div id=\"play-reset\">\n          <div id='start-pause' onClick={props.default? props.sessionOperation: props.breakOperation}>\n            <i id=\"start_stop\" className={props.start? 'fa fa-pause fa-2x': 'fa fa-play fa-2x'}></i>\n          </div>\n          <div id=\"restart\" onClick={props.reset}>\n            <i id=\"reset\" className='fa fa-refresh fa-2x'></i>\n          </div>\n        </div>\n  )\n}\nconst DisplayComponent = (props) => {\n  return (\n    <div id='display'>\n      <div id=\"timer-label\">{props.text}</div>\n      <div id=\"time-left\">{props.display}</div>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      sessionStart: false,\n      breakStart: false,\n      session: 25,\n      break: 5,\n      default: true,\n      sessionTimer: 1500,\n      breakTimer: 300,\n      start: false\n    }\n\n    this.warning = this.warning.bind(this);\n    this.alarm = this.alarm.bind(this);\n    this.minuteSeconds = this.minuteSeconds.bind(this);\n    this.incrementBreak = this.incrementBreak.bind(this);\n    this.decrementBreak = this.decrementBreak.bind(this);\n    this.incrementSession = this.incrementSession.bind(this);\n    this.decrementSession = this.decrementSession.bind(this);\n    this.sessionOperation = this.sessionOperation.bind(this);\n    this.breakOperation = this.breakOperation.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  warning () {\n    \n  }\n  alarm () {\n      this.audioBeep.play();\n  }\n  minuteSeconds (sec){\n    let minutes = Math.floor(sec / 60);\n    let seconds = sec % 60;\n    minutes = minutes < 10? '0'+ minutes: minutes;\n    seconds = seconds < 10? '0'+ seconds: seconds;\n    return `${minutes}:${seconds}`;\n  }\n  incrementBreak(){\n    if (!this.state.start && this.state.break < 60) {\n      this.setState({\n        break: this.state.break + 1,\n        breakTimer: this.state.breakTimer + 60\n      });\n    }\n  }\n  decrementBreak(){\n    if (!this.state.start && this.state.break > 1) {\n      this.setState({\n        break: this.state.break - 1,\n        breakTimer: this.state.breakTimer - 60\n      });\n    }\n  }\n  incrementSession(){\n    if (!this.state.start && this.state.session < 60) {\n      this.setState({\n        session: this.state.session + 1,\n        sessionTimer: this.state.sessionTimer + 60\n      });\n    }\n  }\n  decrementSession(){\n    if (!this.state.start && this.state.session > 1 ) {\n      this.setState({\n        session: this.state.session - 1,\n        sessionTimer: this.state.sessionTimer - 60\n      });\n    }\n  }\n  reset () {\n    this.setState({\n      sessionStart: false,\n      breakStart: false,\n      session: 25,\n      break: 5,\n      default: true,\n      sessionTimer: 25 * 60,\n      breakTimer: 5 * 60,\n      start: false\n    });\n    this.audioBeep.pause();\n    this.audioBeep.currentTime = 0;\n  }\n  sessionOperation(){\n    this.setState({\n      sessionStart: !this.state.sessionStart,\n      start: !this.state.start\n    });\n    let time = setInterval( () => {\n      if ( this.state.sessionStart ) {\n        if ( this.state.sessionTimer === 0 ) {\n          this.alarm();\n          this.setState({ \n            default: false, \n            sessionStart: !this.state.sessionStart,\n            sessionTimer: this.state.session * 60,\n            start: !this.state.start\n          });\n          clearInterval(time);\n          this.breakOperation();\n        }\n        else {\n          this.setState({ sessionTimer: this.state.sessionTimer - 1 });\n        }\n      }\n      else {\n        clearInterval(time);\n      }\n    }, 1000);\n  }\n  breakOperation() {\n    this.setState({\n      breakStart: !this.state.breakStart,\n      start: !this.state.start\n    });\n    let time = setInterval( () => {\n      if ( this.state.breakStart ) {\n        if ( this.state.breakTimer === 0 ) {\n          this.alarm();\n          this.setState({ \n            default: true, \n            breakStart: !this.state.breakStart,\n            breakTimer: this.state.break * 60,\n            start: !this.state.start\n          });\n          clearInterval(time);\n          this.sessionOperation();\n        } \n        else {\n          this.setState({ breakTimer: this.state.breakTimer - 1 });\n        }\n      } \n      else {\n        clearInterval(time);\n      }\n    }, 1000);\n  }\n  render () {\n    let display = this.state.default? this.state.sessionTimer: this.state.breakTimer;\n    return (\n      <div id=\"pomodoro\">\n        <TimeController \n          incrementBreak={this.incrementBreak}\n          decrementBreak={this.decrementBreak}\n          incrementSession={this.incrementSession}\n          decrementSession={this.decrementSession}\n          break={this.state.break}\n          session={this.state.session}\n        />\n        <DisplayComponent \n          display={this.minuteSeconds(display)}\n          text={this.state.default? 'Session': 'Break'}\n        />\n        <PlayPauseReset \n          default={this.state.default}\n          sessionOperation={this.sessionOperation}\n          breakOperation={this.breakOperation}\n          start={this.state.start}\n          reset={this.reset}\n         />\n        <audio id=\"beep\" preload=\"auto\" \n          src=\"https://goo.gl/65cBl1\"\n          ref={(audio) => { this.audioBeep = audio; }} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}